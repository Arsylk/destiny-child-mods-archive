{"version":3,"sources":["CharacterImage.js","CharacterPreview.js","lib/base-url.js","App.js","serviceWorker.js","index.js"],"names":["CharacterImage","character","variants","code","variant","hash","reduce","acc","vId","src","BASE_URL","mods","style","maxWidth","maxHeight","height","CharacterPreview","name","Object","keys","length","key","marginBottom","marginRight","textDecoration","href","width","clear","sort","map","cextAlign","title","marginLeft","textAlign","display","position","padding","target","App","useState","filter","setFilter","codes","characters","filtered","toLocaleLowerCase","indexOf","className","onKeyUp","e","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4x9gBAaeA,MAVf,YAAuE,IAAD,IAA7CC,UAAYC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,KAAOC,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,KAK7D,OAJAD,EAAUA,GAAW,CAAC,KAAM,MAAME,QAAO,SAACC,EAAKC,GAC7C,OAAOD,KAAQL,EAASM,IAAOA,KAC9B,KAEgBN,EAASE,IAC1B,yBAAKK,IAAKC,qBAA2BP,EAAO,IAAMC,EAAU,KAAOC,GAAQH,EAASE,GAASO,KAAK,IAAM,6BAA8BC,MAAO,CAACC,SAAU,QAASC,UAAW,QAASC,OAAQ,YACzL,MC+BOC,MArCf,YAAwC,IAAbf,EAAY,EAAZA,UAClBE,EAAwBF,EAAxBE,KAAYD,GAAYD,EAAlBgB,KAAkBhB,EAAZC,UAInB,OAHgBgB,OAAOC,KAAKjB,GAAUI,QAAO,SAACC,EAAKC,GAC3C,OAAOD,GAAOL,EAASM,GAAKG,MAAQ,IAAIS,SACvC,GAEP,yBAAKC,IAAKlB,EAAMS,MAAO,CACrBU,aAAc,MACdC,YAAa,MAGbC,eAAgB,QACfC,KAAM,eAAiBtB,GACxB,yBAAKS,MAAO,CAACU,aAAc,MAAOI,MAAO,OAAQC,MAAO,SAGrDT,OAAOC,KAAKlB,EAAUC,UAAU0B,OAAOC,KAAI,SAAArB,GAAG,OAC7C,yBAAKa,IAAG,UAAKlB,EAAL,YAAaK,GAAOI,MAAO,CAACW,YAAa,MAAOO,UAAW,SAAUR,aAAc,QACzF,4BAAKnB,EAAL,IAAYK,EAAZ,IAAkBP,EAAUC,SAASM,GAAKuB,MAA1C,IAAkD9B,EAAUgB,MAC3DhB,EAAUC,SAASM,GAAKG,MAAQV,EAAUC,SAASM,GAAKG,KAAKkB,KAAI,SAAAxB,GAAI,OACpE,yBAAKgB,IAAKhB,EAAMO,MAAO,CAACoB,WAAY,MAAOC,UAAW,SAAUC,QAAS,eAAgBC,SAAU,WAAYC,QAAS,YACtH,uBAAGX,KCvBf,UDuB6B,mCAA+BtB,EAA/B,YAAuCK,EAAvC,oBAAsDH,GAAQgC,OAAO,UACpF,kBAAC,EAAD,CAAgBpC,UAAWA,EAAWG,QAASI,EAAKH,KAAMA,gB,OEE7DiC,MAtBf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KAEPC,EAAQxB,OAAOC,KAAKwB,GAAYf,OAChCgB,EAAWJ,EACPE,EAAMF,QAAO,SAAArC,GAAI,OAChBA,EAAO,IAAMwC,EAAWxC,GAAMc,MAAM4B,oBAAoBC,QAAQN,EAAOK,sBAAwB,KAEhGH,EACV,OACE,yBAAKK,UAAU,OACb,0DACA,gDACqB,IACnB,2BAAOC,QAAS,SAAAC,GAAC,OAAIR,EAAUQ,EAAEZ,OAAOa,WAEzCN,EAASf,KAAI,SAAA1B,GAAI,OAChB,kBAAC,EAAD,CAAkBkB,IAAKlB,EAAMF,UAAW0C,EAAWxC,UCVvCgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a7b785e9.chunk.js","sourcesContent":["import React from 'react'\r\nimport BASE_URL from './lib/base-url'\r\n\r\nfunction CharacterImage({character: {variants, code}, variant, hash}) {\r\n  variant = variant || ['01', '00'].reduce((acc, vId) => {\r\n    return acc || (variants[vId] ? vId : false)\r\n  }, false)\r\n\r\n  return (variant && variants[variant] && (\r\n    <img src={BASE_URL + 'characters/' + code + '_' + variant + '/' + (hash || variants[variant].mods[0]) + '/preview-cropped-thumb.png'} style={{maxWidth: '300px', maxHeight: '300px', height: '300px'}} />\r\n  )) || null\r\n}\r\n\r\nexport default CharacterImage","import React from 'react'\r\nimport CharacterImage from './CharacterImage'\r\nimport BASE_URL from './lib/base-url'\r\n\r\nfunction CharacterPreview({character}) {\r\n  const {code, name, variants} = character,\r\n        numMods = Object.keys(variants).reduce((acc, vId) => {\r\n          return acc + (variants[vId].mods || []).length\r\n        }, 0)\r\n  return (\r\n    <div key={code} style={{\r\n      marginBottom: '1em',\r\n      marginRight: '1em',\r\n      // display: 'inline-block',\r\n      // textAlign: 'center',\r\n      textDecoration: 'none'\r\n    }} href={'/characters/' + code}>\r\n      <div style={{marginBottom: '2em', width: '100%', clear: 'both'}}>\r\n        {/* <h2>{code} - {name} ({Object.keys(variants).length} variants, {numMods} mods)</h2> */}\r\n        {/* <CharacterImage character={character} /> */}\r\n        {Object.keys(character.variants).sort().map(vId => (\r\n          <div key={`${code}_${vId}`} style={{marginRight: '1em', cextAlign: 'center', marginBottom: '1em'}}>\r\n            <h2>{code}_{vId} {character.variants[vId].title} {character.name}</h2>\r\n            {character.variants[vId].mods && character.variants[vId].mods.map(hash => (\r\n              <div key={hash} style={{marginLeft: '2em', textAlign: 'center', display: 'inline-block', position: 'relative', padding: '0 1em 0'}}>\r\n                <a href={BASE_URL + `live2d-viewer.html?model=${code}_${vId}&modHash=${hash}`} target=\"_blank\">\r\n                  <CharacterImage character={character} variant={vId} hash={hash} />\r\n                </a>\r\n                {/* <br />\r\n                <a href={`/characters/${code}_${vId}/${hash}/${code}_${vId}.pck`} style={{position: 'absolute', top: 0, right: 0}}>\r\n                  d/l\r\n                </a> */}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharacterPreview","export default process.env.NODE_ENV == 'development'\r\n  ? '/'\r\n  : '/public'","import React, {useState} from 'react';\nimport CharacterPreview from './CharacterPreview'\n// import logo from './logo.svg';\n// import './App.css';\nimport characters from './data/characters.json'\n\nfunction App() {\n  const [filter, setFilter] = useState(''),\n        codes = Object.keys(characters).sort(),\n        filtered = filter\n          ? codes.filter(code =>\n            (code + ' ' + characters[code].name).toLocaleLowerCase().indexOf(filter.toLocaleLowerCase()) > -1\n          )\n          : codes\n  return (\n    <div className=\"App\">\n      <h1>Destiny Child Mods Archive</h1>\n      <p>\n        Filter characters:{' '}\n        <input onKeyUp={e => setFilter(e.target.value)}/>\n      </p>\n      {filtered.map(code => (\n        <CharacterPreview key={code} character={characters[code]} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}