{"version":3,"sources":["CharacterImage.js","CharacterPreview.js","App.js","index.js"],"names":["CharacterImage","character","variants","code","variant","hash","reduce","acc","vId","alt","src","mods","style","maxWidth","maxHeight","height","CharacterPreview","name","Object","keys","length","key","marginBottom","marginRight","textDecoration","href","width","clear","sort","map","cextAlign","title","marginLeft","textAlign","display","position","padding","target","App","useState","filter","setFilter","stars","setStars","type","setType","codes","characters","filtered","toLocaleLowerCase","indexOf","starLevel","parseInt","match","RegExp","className","taget","onKeyUp","e","value","onChange","selected","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0mijBAYeA,MAVf,YAAuE,IAAD,IAA7CC,UAAYC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,KAAOC,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,KAK7D,OAJAD,EAAUA,GAAW,CAAC,KAAM,MAAME,QAAO,SAACC,EAAKC,GAC7C,OAAOD,KAAQL,EAASM,IAAOA,KAC9B,KAEgBN,EAASE,IAC1B,yBAAKK,IAAKN,EAAO,IAAMC,EAASM,IAAK,gBAAkBP,EAAO,IAAMC,EAAU,KAAOC,GAAQH,EAASE,GAASO,KAAK,IAAM,cAAeC,MAAO,CAACC,SAAU,QAASC,UAAW,QAASC,OAAQ,YAC5L,MC+BOC,MArCf,YAAwC,IAAbf,EAAY,EAAZA,UAClBE,EAAwBF,EAAxBE,KAAYD,GAAYD,EAAlBgB,KAAkBhB,EAAZC,UAInB,OAHgBgB,OAAOC,KAAKjB,GAAUI,QAAO,SAACC,EAAKC,GAC3C,OAAOD,GAAOL,EAASM,GAAKG,MAAQ,IAAIS,SACvC,GAEP,yBAAKC,IAAKlB,EAAMS,MAAO,CACrBU,aAAc,MACdC,YAAa,MAGbC,eAAgB,QACfC,KAAM,eAAiBtB,GACxB,yBAAKS,MAAO,CAACU,aAAc,MAAOI,MAAO,OAAQC,MAAO,SAGrDT,OAAOC,KAAKlB,EAAUC,UAAU0B,OAAOC,KAAI,SAAArB,GAAG,OAC7C,yBAAKa,IAAG,UAAKlB,EAAL,YAAaK,GAAOI,MAAO,CAACW,YAAa,MAAOO,UAAW,SAAUR,aAAc,QACzF,4BAAKnB,EAAL,IAAYK,EAAZ,IAAkBP,EAAUC,SAASM,GAAKuB,MAA1C,IAAkD9B,EAAUgB,MAC3DhB,EAAUC,SAASM,GAAKG,MAAQV,EAAUC,SAASM,GAAKG,KAAKkB,KAAI,SAAAxB,GAAI,OACpE,yBAAKgB,IAAKhB,EAAMO,MAAO,CAACoB,WAAY,MAAOC,UAAW,SAAUC,QAAS,eAAgBC,SAAU,WAAYC,QAAS,YACtH,uBAAGX,KAAI,qCAAgCtB,EAAhC,YAAwCK,EAAxC,oBAAuDH,GAAQgC,OAAO,UAC3E,kBAAC,EAAD,CAAgBpC,UAAWA,EAAWG,QAASI,EAAKH,KAAMA,gB,OC8B7DiC,MAjDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGWJ,mBAAS,KAHpB,mBAGNK,EAHM,KAGAC,EAHA,KAIPC,EAAQ5B,OAAOC,KAAK4B,GAAYnB,OAClCoB,EAAWR,EACXM,EAAMN,QAAO,SAAArC,GAAI,OAChBA,EAAO,IAAM4C,EAAW5C,GAAMc,MAAMgC,oBAAoBC,QAAQV,EAAOS,sBAAwB,KAEhGH,EAOJ,OANGJ,IACDM,EAAWA,EAASR,QAAO,SAAArC,GAAI,OAAI4C,EAAW5C,GAAMgD,WAAaC,SAASV,OAEzEE,IACDI,EAAWA,EAASR,QAAO,SAAArC,GAAI,OAAIA,EAAKkD,MAAM,IAAIC,OAAO,IAAMV,QAG/D,yBAAKW,UAAU,OACb,0DACA,iRAAsP,uBAAG9B,KAAK,8EAA8E+B,MAAM,UAA5F,QAAtP,UAA0W,uBAAG/B,KAAK,kEAAkEY,OAAO,UAAjF,UAA1W,oBAA+d,uBAAGZ,KAAK,6BAA6BY,OAAO,UAA5C,qBAA/d,KACA,gDACqB,IACnB,2BAAOoB,QAAS,SAAAC,GAAC,OAAIjB,EAAUiB,EAAErB,OAAOsB,UACvC,IACD,4BAAQC,SAAU,SAAAF,GAAC,OAAIf,EAASe,EAAErB,OAAOsB,SACvC,4BAAQA,MAAM,IAAd,mBACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,WAED,IACD,4BAAQC,SAAU,SAAAF,GAAC,OAAIb,EAAQa,EAAErB,OAAOsB,SACtC,4BAAQA,MAAM,IAAd,aACA,4BAAQA,MAAM,IAAIE,UAAQ,GAA1B,UACA,4BAAQF,MAAM,KAAd,YACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,KAAd,WAGHX,EAASnB,KAAI,SAAA1B,GAAI,OAChB,kBAAC,EAAD,CAAkBkB,IAAKlB,EAAMF,UAAW8C,EAAW5C,UC5C3D2D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.2a668c0b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction CharacterImage({character: {variants, code}, variant, hash}) {\r\n  variant = variant || ['01', '00'].reduce((acc, vId) => {\r\n    return acc || (variants[vId] ? vId : false)\r\n  }, false)\r\n\r\n  return (variant && variants[variant] && (\r\n    <img alt={code + '_' + variant} src={'./characters/' + code + '_' + variant + '/' + (hash || variants[variant].mods[0]) + '/static.png'} style={{maxWidth: '300px', maxHeight: '300px', height: '300px'}} />\r\n  )) || null\r\n}\r\n\r\nexport default CharacterImage","import React from 'react'\r\nimport CharacterImage from './CharacterImage'\r\n\r\nfunction CharacterPreview({character}) {\r\n  const {code, name, variants} = character,\r\n        numMods = Object.keys(variants).reduce((acc, vId) => {\r\n          return acc + (variants[vId].mods || []).length\r\n        }, 0)\r\n  return (\r\n    <div key={code} style={{\r\n      marginBottom: '1em',\r\n      marginRight: '1em',\r\n      // display: 'inline-block',\r\n      // textAlign: 'center',\r\n      textDecoration: 'none'\r\n    }} href={'/characters/' + code}>\r\n      <div style={{marginBottom: '2em', width: '100%', clear: 'both'}}>\r\n        {/* <h2>{code} - {name} ({Object.keys(variants).length} variants, {numMods} mods)</h2> */}\r\n        {/* <CharacterImage character={character} /> */}\r\n        {Object.keys(character.variants).sort().map(vId => (\r\n          <div key={`${code}_${vId}`} style={{marginRight: '1em', cextAlign: 'center', marginBottom: '1em'}}>\r\n            <h2>{code}_{vId} {character.variants[vId].title} {character.name}</h2>\r\n            {character.variants[vId].mods && character.variants[vId].mods.map(hash => (\r\n              <div key={hash} style={{marginLeft: '2em', textAlign: 'center', display: 'inline-block', position: 'relative', padding: '0 1em 0'}}>\r\n                <a href={`./live2d-viewer.html?model=${code}_${vId}&modHash=${hash}`} target=\"_blank\">\r\n                  <CharacterImage character={character} variant={vId} hash={hash} />\r\n                </a>\r\n                {/* <br />\r\n                <a href={`/characters/${code}_${vId}/${hash}/${code}_${vId}.pck`} style={{position: 'absolute', top: 0, right: 0}}>\r\n                  d/l\r\n                </a> */}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharacterPreview","import React, {useState} from 'react';\nimport CharacterPreview from './CharacterPreview'\n// import logo from './logo.svg';\n// import './App.css';\nimport characters from './data/characters.json'\n\nfunction App() {\n  const [filter, setFilter] = useState(''),\n        [stars, setStars] = useState(''),\n        [type, setType] = useState('c'),\n        codes = Object.keys(characters).sort()\n  let filtered = filter\n    ? codes.filter(code =>\n      (code + ' ' + characters[code].name).toLocaleLowerCase().indexOf(filter.toLocaleLowerCase()) > -1\n    )\n    : codes\n  if(stars) {\n    filtered = filtered.filter(code => characters[code].starLevel == parseInt(stars))\n  }\n  if(type) {\n    filtered = filtered.filter(code => code.match(new RegExp('^' + type)))\n  }\n  return (\n    <div className=\"App\">\n      <h1>Destiny Child Mods Archive</h1>\n      <p>All PCK files have been converted to universal and should work in both Global and KR/JP. To download, click on a mod image to launch the Live2d preview, then on the douwnload icon in the top right. Instructions on installing mods can be found <a href=\"https://wiki.anime-sharing.com/hgames/index.php?title=Destiny_Child/Modding\" taget=\"_blank\">here</a> or on <a href=\"http://letmegooglethat.com/?q=destiny+child+how+to+install+mods\" target=\"_blank\">Google</a>. There's also a <a href=\"https://discord.gg/2vew9te\" target=\"_blank\">Discord community</a>.</p>\n      <p>\n        Filter characters:{' '}\n        <input onKeyUp={e => setFilter(e.target.value)} />\n        {' '}\n        <select onChange={e => setStars(e.target.value)}>\n          <option value=\"\">All star levels</option>\n          <option value=\"1\">1 star</option>\n          <option value=\"2\">2 star</option>\n          <option value=\"3\">3 star</option>\n          <option value=\"4\">4 star</option>\n          <option value=\"5\">5 star</option>\n        </select>\n        {' '}\n        <select onChange={e => setType(e.target.value)}>\n          <option value=\"\">All Types</option>\n          <option value=\"c\" selected>Childs</option>\n          <option value=\"m\">Monsters</option>\n          <option value=\"sc\">Spa Childs</option>\n          <option value=\"sm\">Spa Monsters</option>\n          <option value=\"z\">Other</option>\n        </select>\n      </p>\n      {filtered.map(code => (\n        <CharacterPreview key={code} character={characters[code]} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}